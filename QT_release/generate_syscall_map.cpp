// generate_syscall_map.cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

int main() {
    // 系统调用头文件路径
    std::ifstream header_file("/usr/include/x86_64-linux-gnu/asm/unistd_64.h");
    if (!header_file) {
        std::cerr << "Error: Cannot open /usr/include/x86_64-linux-gnu/asm/unistd_64.h" << std::endl;
        return 1;
    }

    std::string line;
    const std::string prefix = "#define __NR_";
    
    // 输出 C++ 代码头部
    std::cout << "// This file is auto-generated by generate_syscall_map.cpp. DO NOT EDIT.\n";
    std::cout << "#pragma once\n";
    std::cout << "#include <QMap>\n";
    std::cout << "#include <QString>\n\n";
    std::cout << "static const QMap<long, const char*> syscall_map = {\n";

    // 逐行读取头文件
    while (std::getline(header_file, line)) {
        if (line.rfind(prefix, 0) == 0) { // 判断是否以 #define __NR_ 开头
            // 解析行: #define __NR_read 0
            size_t name_start = prefix.length();
            size_t name_end = line.find(' ', name_start);
            if (name_end != std::string::npos) {
                std::string name = line.substr(name_start, name_end - name_start);
                std::string number_str = line.substr(name_end + 1);
                try {
                    long number = std::stol(number_str);
                    // 输出 map 条目
                    std::cout << "    {" << number << ", \"" << name << "\"},\n";
                } catch (const std::invalid_argument& e) {
                    // 忽略无法解析的行
                }
            }
        }
    }
    
    // 输出 C++ 代码尾部
    std::cout << "};\n\n";
    std::cout << "static QString getSyscallName(long number) {\n";
    std::cout << "    return syscall_map.value(number, \"Unknown\");\n";
    std::cout << "}\n";

    return 0;
}